package collectionPkg;
import java.util.function.*;

class MyStream<T>{
    T o;

    public void setO(T o) {
        this.o = o;
    }

    public void forEach(Consumer<T> c){
        c.accept(o);
    }
    public MyStream<T> peek(Consumer<T> c){
        c.accept(o);
        return this;
    }
    public MyStream<T> map(Function<T,T> f){
        this.o = f.apply(this.o);
        return this;
    }
}

//interface MyPredicate<T>{
//    Boolean test(T o);
//    default MyPredicate<T> or(MyPredicate<T> t1) {
//        MyPredicate<T> t2 = o -> this.test(o) || t1.test(o);
//        return t2;
//    }
//    default MyPredicate<T> and(MyPredicate<T> t1) {
//        MyPredicate<T> t2 = o -> this.test(o) && t1.test(o);
//        return t2;
//    }
//}


public class StreamAPIEg1 {
//    void fn(int x){
//        System.out.println(x*x);
//    }
    public static void main(String[] args) {
        MyStream<Integer> stream1=new MyStream<>();
        stream1.setO(10);
        stream1.forEach(System.out::println);
        
//        MyPredicate<Integer> m1=x -> x>18;
//        MyPredicate<Integer> m2=x -> x<60;
//        MyPredicate<Integer> validateAge=m1.and(m2);
//        System.out.println("Validate Age 20: "+ validateAge.test(20));
        
        
//        Consumer<Integer> c1=new StreamAPIEg1()::fn;
//        Consumer<Integer> c2=c1.andThen(a-> System.out.println(a*a*a));
//        c2.accept(20);
        
        MyStream<Integer> m2=new MyStream<>();
        m2.map(a->a*a).peek(System.out::print).map(a->a*a*a).forEach(System.out::print);
        
    }
}







import java.util.HashMap;
import java.util.Map;
public class JavaForEachMap {
    public static void main(String[] args) {
        Map<String, Integer> items = new HashMap<>();
        items.put("coins", 3);
        items.put("pens", 2);
        items.put("keys", 1);
        items.put("sheets", 12);
        items.forEach((k, v) -> {
            System.out.printf("%s : %d%n", k, v);
        });
    }
}




import java.util.Arrays;
public class JavaForEachArray {
    public static void main(String[] args) {
        int[] nums = { 3, 4, 2, 1, 6, 7 };
    
        Arrays.stream(nums).forEach((e) -> { System.out.println(e); });
    }
}





Intermediate Operations:
Stream.filter()
Stream.map()
Stream.distinct()
Stream.peek()

Terminal Operations:
Stream.collect()
Stream.min() / Stream.max()
Stream.findAny()
Stream.findFirst()
Stream.count()







import java.util.*; 
 class StreamMap { 
    public static void main(String[] args)      { 
         System.out.println("The stream after applying the function is : "); 
         // Creating a list of Integers 
        List<Integer> list = Arrays.asList(3, 6, 9, 12, 15); 
         // Using Stream map(Function mapper) and displaying the corresponding new stream 
        list.stream().map(number -> number * 3).forEach(System.out::println); 
    } 
} 





import java.util.stream.*;
import java.util.*;
import java.util.function.*;
public class SimpleStream2 {
   public static void main(String args[]) {
      Random random = new Random();
random.ints().limit(10).forEach(System.out::println);
   }
}







import java.util.*; 
public class Main { 
	public static void main(String args[]) { 
		List<String> gadgets = new ArrayList<>(); 
		gadgets.add("SmartPh"); 
		gadgets.add("SmartWatch"); 
		gadgets.add("SmartTV"); 
		gadgets.add("iPhone"); 
		for (String gadget : gadgets) { 
    		System.out.println("processing: " + gadget);
			if (gadget.length() > 8) { 
				System.out.println("Prior ot Java 8: " + gadget); 
				break; 
		} 	} 
		// using lambda expression and stream methods 
		String item = gadgets.stream() 
				.peek(s -> System.out.println("processing: " + s)) 
				.filter(s -> s.length() > 8) .findFirst().orElse(""); 
		System.out.println("In Java 8, first item: " + item); 
		}	}






import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
public class Hello {
  public static void main(String[] args) {
    List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
    System.out.println("original list: " + numbers);
    List<Integer> even = numbers.stream()
                                .map(s -> Integer.valueOf(s))
                                .filter(number -> number % 2 == 0)
                                .collect(Collectors.toList());
    System.out.println("processed list, only even numbers: " + even);
  }
}






import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
public class Main {
  public static void main(String[] args) {
    List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
    System.out.println("original list: " + numbers);
    List<Integer> even = numbers.stream().map(s -> Integer.valueOf(s))
           .filter(number -> number % 2 == 0).collect(Collectors.toList());
    System.out.println("processed list, only even numbers: " + even);
String even2 = numbers.stream().map(s -> Integer.valueOf(s))
           .filter(number -> number % 2 == 0).map(s->s.toString()).collect(Collectors.joining(", "));
    System.out.println("processed list, only even numbers: " + even2);

  }
}







