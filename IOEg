package pkg4IO;

public class CmdLineEg {
    public static void main(String[] args) {
        
        for(int i=1;i<args.length;i++){
            System.out.println(i + "th parameter : " + args[i]);
        }
    }
}



import java.io.FileOutputStream;  
public class FileOutputStreamExample {  
    public static void main(String args[]){    
           try{    
             FileOutputStream fout=new FileOutputStream("C:\\Monica\\test.txt");    
             String s="Hello World!";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
             System.out.println("File OverWritten");    
            }catch(Exception e){System.out.println(e);}    
      }    
} 



package pkg4IO;
import java.io.FileOutputStream;
public class FileOutputStreamExample {
    public static void main(String args[]){
        try{
            FileOutputStream fout=new FileOutputStream("C:\\Monica\\test.txt", true);
            String s="Hello World!";
            byte b[]=s.getBytes();//converting string into byte array
            fout.write(b);
            fout.close();
            System.out.println("File OverWritten");
        }catch(Exception e){System.out.println(e);}
    }
}





import java.io.FileInputStream;  
public class FileInputStreamExample {  
     public static void main(String args[]){    
          try{    
            FileInputStream fin=new FileInputStream("C:\\Monica\\test.txt");    
            int i=0;    
            while((i=fin.read())!=-1){    
             System.out.print((char)i);    
            }    
            fin.close();    
          }catch(Exception e){System.out.println(e);}    
         }    
        } 
//Hello World!



import java.io.File;
public class FileDemo {
   public static void main(String[] args) {
      File f = null;
      String s = "C:\\Monica\\test.txt";
      try {
             // create new file
            f = new File(s);
            // true if the file is executable
            boolean bool = f.canExecute();
            // find the absolute path
            String a = f.getAbsolutePath(); 
            // prints absolute path
            System.out.print(a);
            System.out.println(" is executable: "+ bool);
      } catch (Exception e) {
         // if any I/O error occurs
         e.printStackTrace();
      }
   }
}



import java.io.*;
import java.util.*;
public class ScannerExample {
	public static void main(String args[]) throws FileNotFoundException {
		// creating File instance to reference text file in Java
		File text = new File("C://Monica//test.txt");
		// Creating Scanner instance to read File in Java
		try (Scanner scnr = new Scanner(text)) {
			// Reading each line of file using Scanner class
			int lineNumber = 1;
			while (scnr.hasNextLine()) {
				String line = scnr.nextLine();
				System.out.println("line " + (lineNumber++) + " :" + line);
			}
		}
	}
}




import java.io.*;
public class FileReadWrite {
   public static void main(String args[])throws IOException {
      File file = new File("/Monica/Hello.txt");
      // creates the file
      file.createNewFile();
      // creates a FileWriter Object
      FileWriter writer = new FileWriter(file); 
      // Writes the content to the file
      writer.write("This \nis \nan \nexample of \nFile Reader and Writer"); 
      writer.flush();
      writer.close();
      // Creates a FileReader Object
      FileReader fr = new FileReader(file); 
      char [] a = new char[50];
      fr.read(a);   // reads the content to the array
      for(char c : a)
         System.out.print(c);   // prints the characters one by one
      fr.close();
   }
}




import java.io.*;
public class FileCopy {
	public static void main(String[] args) {
		if (args.length != 2)
			System.err.println("Usage: java FileCopy <source file> <destination>");
		else {
			try {
				copy(args[0], args[1]);
				System.out.println("File(s) copied");
			} catch (Exception e) {
				System.err.println(e);
			}
		}
	}
	public static void copy(String from_name, String to_name) throws IOException {
		File from_file = new File(from_name);
		File to_file = new File(to_name);
		try (FileInputStream from = new FileInputStream(from_file);
				FileOutputStream to = new FileOutputStream(to_file)) {
			byte[] buffer = new byte[4096];
			int bytes_read;
			while ((bytes_read = from.read(buffer)) != -1)
				to.write(buffer, 0, bytes_read);
		}

	}

}




/Monica/test.txt /Monica/test-copied.txt
C:\\Monica\\test.txt C:\\Monica\test-copied.txt





import java.io.File;
public class CreateDir {

   public static void main(String args[]) {
      String dirname = "/Monica/tmp/mydirs";
      File d = new File(dirname);
      
      // Create directory now.
      d.mkdirs();
      System.out.println("Dirs Created ..");
   }
}



import java.io.File;
public class ReadDir {
   public static void main(String[] args) {
      File file = null;
      String[] paths;
      try {      
          file = new File("/Monica");
         // array of files and directory
         paths = file.list();
         // for each name in the path array
         for(String path:paths) {
            // prints filename and directory name
            System.out.println(path);
         }
      } catch (Exception e) {
          e.printStackTrace();
      }
   }
}



import java.io.IOException;
import java.nio.file.*;
public class PathFileNIO {
	 public static void main(String[] args) {
    	String dirPath ="/Monica/subDir";
        // Check If Directory Already Exists Or Not?
        Path dirPathObj = Paths.get(dirPath);
        boolean dirExists = Files.exists(dirPathObj);
        if(dirExists) {
            System.out.println("! Directory Already Exists !");
        } else {
            try {
                // Creating The New Directory Structure
                Files.createDirectories(dirPathObj);
                System.out.println("! New Directory Successfully Created !");
            } catch (IOException ioExceptionObj) {
                System.out.println("Problem While Creating The Directory Structure: " + ioExceptionObj.getMessage());
            }
        }
    }	}
    
    
    
    
    
    import java.io.IOException;
import java.nio.file.*;
public class PathFileNIO {
	 public static void main(String[] args) {
		 Path sourcePath = Paths.get("/Monica/test.txt");
		 Path destinationPath = Paths.get("/Monica/test-copy1.txt");
		 try {
		     //Files.copy(sourcePath, destinationPath);
		     Files.copy(sourcePath, destinationPath,
						StandardCopyOption.REPLACE_EXISTING);
		     System.out.println("Done");
		 } catch(FileAlreadyExistsException e) {
		     //file already exists and unable to copy
		 } catch (IOException e) {
		     //permission issue
		     e.printStackTrace();
		 }
    }	}



try {
    Files.move(sourcePath, destinationPath,
            StandardCopyOption.REPLACE_EXISTING);
} catch (IOException e) {
    e.printStackTrace();
}



import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
 
public class CheckFileAttributes {
  public static void main(String args[]) {
    Path filePath = Paths.get("aaa.txt");
    //Is file readable
    System.out.println("Is file readable: " + Files.isReadable(filePath));
    //Is file writable
    System.out.println("Is file writable: " + Files.isWritable(filePath));
    //Is file executable
     System.out.println("Is file executable: " + Files.isExecutable(filePath));
  }
}





import java.io.*; 
public class Emp implements Serializable { 
private static final long serialversionUID =  129348938L; 
    transient int a; 
    static int b; 
    String name; 
    int age; 
     // Default constructor 
    public Emp(String name, int age, int a, int b)      { 
        this.name = name; 
        this.age = age; 
        this.a = a; 
        this.b = b; 
    } 
  } 





package pkg4IO;
import java.io.*;

public class SerialExample {
    public static void main(String[] args)     {
        Emp object = new Emp("ab", 20, 2, 1000);
        String filename = "C:\\Monica\\aaaa.ser";
        try { // Serialization
            // Saving of object in a file 
            FileOutputStream file = new FileOutputStream(filename);
            ObjectOutputStream out = new ObjectOutputStream(file);
            out.writeObject(object); // Method for serialization of object 
            out.close();
            file.close();
            System.out.println("Object has been serialized\n" + "Data before Deserialization.");
            System.out.println(object);
            object.b = 2000;  // value of static variable changed
        }
        catch (IOException ex) {
            System.out.println("IOException is caught");
        }
        object = null;
        try { // Deserialization 
            // Reading the object from a file 
            FileInputStream file = new FileInputStream(filename);
            ObjectInputStream in = new ObjectInputStream(file);
            object = (Emp)in.readObject(); // Method for deserialization of object
            in.close();
            file.close();
            System.out.println("Object has been deserialized\n" + "Data after Deserialization.");
            System.out.println(object);
            // System.out.println("z = " + object1.z); 
        }
        catch (IOException ex) { System.out.println("IOException is caught"); }
        catch (ClassNotFoundException ex) { System.out.println("ClassNotFoundException" + " is caught");   }
    }
} 



    }







application.properties


message.one=This is first message
message.two=This is second message
message.three=This is third message
message.four=This is fourth message
message.five=This is fifth message
message.six=This is sixth message
message.seven=This is seventh message
message.eight=This is eighth message
message.nine=This is ninth message
message.ten=This is tenth message




ApplicationProperties.java

package pkg4IO;

package org.example;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
public class ApplicationProperties {
    private final Properties properties;
    ApplicationProperties() {
        properties = new Properties();
        try {
            properties.load(getClass().getClassLoader().getResourceAsStream("application.properties"));
        } catch (IOException e) {
            Logger.getLogger(getClass().getName()).log(Level.ALL, "IOException Occured while loading properties file:" +e.getMessage());
        }
    }
    public String readProperty(String keyName) {
        Logger.getLogger(getClass().getName()).log(Level.INFO, "Reading Property " + keyName);
        return properties.getProperty(keyName, "There is no key in the properties file");
    }
}




Main.java

package pkg4IO;

import java.util.logging.Level;
import java.util.logging.Logger;
public class Main {
    public static void main(String[] args) {
        ApplicationProperties properties = new ApplicationProperties();
        Logger.getLogger("App Main").log(Level.INFO, properties.readProperty("message.one"));
        Logger.getLogger("App Main").log(Level.INFO, properties.readProperty("message.two"));
        Logger.getLogger("App Main").log(Level.INFO, properties.readProperty("message.three"));
        Logger.getLogger("App Main").log(Level.INFO, properties.readProperty("message.four"));
        Logger.getLogger("App Main").log(Level.INFO, properties.readProperty("message.no.property"));
    }
}





import java.util.*;  
import java.io.*;  
public class Test {  
public static void main(String[] args)throws Exception{  
  
  Properties p=System.getProperties();  
  Set set=p.entrySet();  
  Iterator itr=set.iterator();  
  while(itr.hasNext()){  
     Map.Entry entry=(Map.Entry)itr.next();  
     System.out.println(entry.getKey()+" = "+entry.getValue());  
  }  
  
}  
} 




