package exceptionHandling;
class Resource{
    int power;
    void print(){
        System.out.println("Resource");
    }
}

public class Eg1 {
    int divide(int x, int y, Resource r){
        try {
            int res = x / y;
            if(r.power==1)
                throw new ArrayIndexOutOfBoundsException();
//            r.power=0;
            return res;
        }
        catch(ArithmeticException e){
            System.out.println(e);
//            r.power=0;
            return 0;
        }
        finally{
            System.out.println("Finally block");
            r.power=0;
        }
        //return 0;

    }
    public static void main(String[] args) {
        int x=10;
        int y=10;
        Resource r=new Resource();
        r.power=2;
        int res=new Eg1().divide(x,y,r);
        System.out.println(r.power==0 ? "Resource shut down": "Resource is on");
        System.out.println();

    }
}




package exceptionHandling;
import java.io.*;

public class Eg2 {
    void reading1() throws IOException{
        throw new IOException("File IO not studied");
    }
    void reading2() throws IOException
    {
        reading1();
    }

    public static void main(String[] args) throws IOException{
        new Eg2().reading2();
        System.out.println("Continue the code..");
    }
    
}






package exceptionHandling;
import java.io.*;

public class Eg2 {
    void reading1() throws IOException{
        throw new IOException("File IO not studied");
    }
    void reading2() throws IOException
    {
        reading1();
    }

    public static void main(String[] args){
        try{
            new Eg2().reading2();
        }
        catch(IOException e){
            System.out.println(e);
        }
        
        System.out.println("Continue the code..");
    }
    
}






package exceptionHandling;
import java.io.*;

public class Eg2 {
    void reading1() throws IOException{
        throw new IOException("File IO not studied");
    }
    void dividing1() throws ArithmeticException{
        throw new ArithmeticException();
    }
    void dividing2(){
        dividing1();
    }
    void reading2() throws IOException
    {
        reading1();
    }

    public static void main(String[] args){
        try{
            new Eg2().reading2();
        }
        catch(IOException e){
            System.out.println(e);
        }
        
        System.out.println("Continue the code..");
    }
    
}



package exceptionHandling;
import java.io.*;
class Loan{
    int EMI(int interest, int principle) throws Exception { //propagating Checked Exception
        int emi=0;
        if(interest==0){
            throw new IOException("Interest cannot be zero");
        }
        if(principle==0){
            throw new ClassNotFoundException();
        }
        emi=(interest*principle)/(20*12);
        return emi;
    }

}
class HomeLoan extends Loan{
    @Override
    int EMI(int interest, int principle) throws IOException {
        //Compulsorily propagate same or child Exception
        try {
            return super.EMI(interest, principle);
        }
        catch(Exception e){
            throw new IOException(e.getMessage());
        }
        //return 0;
    }
}
class PersonalLoan extends Loan{
    int EMI(int interest, int principle) throws Exception {
        //Compulsorily propagate same or child Exception
        return super.EMI(interest, principle);
    }
}
class VehicleLoan extends Loan{
    int EMI(int interest, int principle) {
        //Compulsorily propagate same or child or no Exception 
        //return super.EMI(interest, principle);
        return 0;
    }
}
public class Eg3 {

}



situations for Exception Handling:
1. throws RuntimeException : it is assumed to be handled by Developer
2. throws Checked Exception:
    a. used to propagate the  unhandled exception to next level
    b. If such method is inherited and overridden, then : we propagate same , child exception or no exception.
    




package exceptionHandling;
class AgeException extends Exception{ //checked Exception
    public AgeException(){super("Age invalid Exception!");}
    public AgeException(String msg){super(msg);}
    public String toString(){
        return "AgeException " + super.getMessage();
    }
}
class Emp{
    private int age;
    public void setAge(int age) throws AgeException{
        if(age>150 || age <= 18){
            throw new AgeException("Age not in Range of (18-150)");
        }
        this.age=age;
    }

    @Override
    public String toString() {
        return "Emp{" +
                "age=" + age +
                '}';
    }
}
public class Eg4 {
    public static void main(String[] args) {
        Emp e=new Emp();
        try {
            e.setAge(-3);
        }
        catch(AgeException ex){
            System.out.println(ex);
        }
        System.out.println(e);
    }
}






package exceptionHandling;
class AgeException extends RuntimeException{ //unchecked Exception
    public AgeException(){super("Age invalid Exception!");}
    public AgeException(String msg){super(msg);}
    public String toString(){
        return "AgeException " + super.getMessage();
    }
}
class Emp{
    private int age;
    public void setAge(int age) {
        if(age>150 || age <= 18){
            //throw new AgeException("Age not in Range of (18-150)");
            throw new AgeException();
        }
        this.age=age;
    }

    @Override
    public String toString() {
        return "Emp{" +
                "age=" + age +
                '}';
    }
}
public class Eg4 {
    public static void main(String[] args) {
        Emp e=new Emp();
//        try {
//            e.setAge(-3);
//        }
//        catch(AgeException ex){
//            System.out.println(ex);
//        }
        e.setAge(-90);
        System.out.println(e);
    }
}




package exceptionHandling;
class ResourcePrinter implements AutoCloseable{

    @Override
    public void close(){
        System.out.println("Printer is shutdown");
    }
    public void print(String m){
        System.out.println("Printing.." + m);
    }
}

public class Eg5 {
    public static void main(String[] args) {
        try(ResourcePrinter printer =new ResourcePrinter()){
            printer.print("Hello World");
        }
        System.out.println("Outside try with resources");
        
    }
}




package exceptionHandling;
class ResourcePrinter implements AutoCloseable{

    @Override
    public void close(){
        System.out.println("Printer is shutdown");
    }
    public void print(String m){
        System.out.println("Printing.." + m);
    }
}

public class Eg5 {
    public static void main(String[] args) {
        try(ResourcePrinter printer =new ResourcePrinter()){
            printer.print("Hello World");
            if(true)
                throw new ArithmeticException();
            printer.print("Hello World post exception");
        }
        catch (ArithmeticException e){
            System.out.println(e);
        }
        finally{
            System.out.println("Finally block");
        }
        System.out.println("Outside try with resources");
        
    }
}





