set serveroutput on; 

DECLARE
    v_event VARCHAR2(15);
BEGIN
   v_event  := q'!Father's day!';
  DBMS_OUTPUT.PUT_LINE('3rd Sunday in June is :   '|| v_event );
   v_event  := q'[Mother's day]';
  DBMS_OUTPUT.PUT_LINE('2nd Sunday in May is :   '|| v_event );
END;
/


.. Alternative Quoting Mechanism (''Q'') for String Literals

Traditional "Doubling-Up" of Single Quotes


BEGIN  
   DBMS_OUTPUT.put_line ('That''s a really funny ''joke''.');  
END; 

Statement processed.That's a really funny 'joke'.


Using Paired Symbols

BEGIN  
    DBMS_OUTPUT.PUT_LINE (  
       q'[What's a quote among friends?]');  
END; 

Statement processed.
What's a quote among friends?



Replacement for Single Quote

BEGIN  
    DBMS_OUTPUT.PUT_LINE (  
       q'!What's a quote among friends?!');  
END; 

Statement processed.
What's a quote among friends?


Alternative Character Inside String!

BEGIN   
   dbms_output.put_line (q'PAll the king's horsesP');   
END; 

Statement processed.
All the king's horses






DECLARE 
 var_salary number(6);
 var_emp_id number(6) := 100;
 BEGIN 
SELECT salary  INTO var_salary  FROM employees  
WHERE employee_id = var_emp_id; 

dbms_output.put_line(var_salary);  
dbms_output.put_line('The employee ' || var_emp_id || ' has salary ' || var_salary); 
END;
 /







DECLARE
 var_num1 number;
 var_num2 number;
BEGIN
 var_num1 := 100;
 var_num2 := 200;
 DECLARE
  var_mult number;
  BEGIN
   var_mult := var_num1 * var_num2;
   dbms_output.put_line(var_mult);
  END;
END;
/





Scalar data type:
CHAR [(maximum_length)]
VARCHAR2 (maximum_length)
NUMBER [(precision, scale)]
BINARY_INTEGER
PLS_INTEGER
BOOLEAN
BINARY_FLOAT
BINARY_DOUBLE
DATE
TIMESTAMP
TIMESTAMP WITH TIME ZONE
TIMESTAMP WITH LOCAL TIME ZONE
INTERVAL YEAR TO MONTH
INTERVAL DAY TO SECOND




SET  SERVEROUTPUT  ON SIZE 1000000;



DECLARE
  n_emp_id EMPLOYEES.EMPLOYEE_ID%TYPE := &emp_id1;
BEGIN
  DECLARE
    n_emp_id employees.employee_id%TYPE := &emp_id2;
    v_name employees.first_name%TYPE;
    BEGIN
     SELECT first_name INTO v_name 
        FROM employees WHERE employee_id = n_emp_id;
     DBMS_OUTPUT.PUT_LINE('First name of employee ' || n_emp_id || ' is ' || v_name);
    END;
END;
/





DECLARE 
  v_outer_var VARCHAR2(25) := 'This is GLOBAL VARIABLE';
BEGIN
  DECLARE
    v_inner_var VARCHAR2(25) := 'This is LOCAL VARIABLE';
  BEGIN
     DBMS_OUTPUT.PUT_LINE(v_inner_var);
     DBMS_OUTPUT.PUT_LINE(v_outer_var);
  END;
  DBMS_OUTPUT.PUT_LINE(v_outer_var);
END;
/




create table demo  as select employee_id,last_name,salary from employees;

SET SERVEROUTPUT ON 



BEGIN
   INSERT INTO DEMO VALUES(1,'SMITH',9999);
   INSERT INTO DEMO VALUES(2,'JOY',787687);
END;
/



DECLARE					
 sal_var   employees.salary%TYPE := 800;   
BEGIN
  UPDATE	employees
  SET		salary = salary + sal_var
  WHERE	job_id='st_clerk';
END;
/



DECLARE
  v_id   employees.employee_id%TYPE := 7345; 
BEGIN							
  DELETE FROM   demo where employee_id =v_id;
END;
/






DECLARE
 a number(2) := &ano;
 BEGIN 
    IF( a < 20 )  THEN 
        dbms_output.put_line('a is less than 20 ' ); 
    END IF;
    dbms_output.put_line('value of a is : ' || a); 
END; 
/




DECLARE
 a number(2) := &ano;
 BEGIN 
    IF( a < 20 )  THEN 
        dbms_output.put_line('a is less than 20 ' ); 
    ELSE 
        dbms_output.put_line('a is not less than 20 ' ); 
    END IF;
    dbms_output.put_line('value of a is : ' || a); 
END; 
/


DECLARE 
	a number(3) := &ano; 
BEGIN 
	IF ( a = 10 ) THEN 
        dbms_output.put_line('Value of a is 10' ); 
    ELSIF ( a = 20 ) THEN 
        dbms_output.put_line('Value of a is 20' ); 
    ELSIF ( a = 30 ) THEN 
        dbms_output.put_line('Value of a is 30' ); 
    ELSE 
        dbms_output.put_line('None of the values is matching'); 
    END IF;
    dbms_output.put_line('Exact value of a is: '|| a ); 
END;    
/




















