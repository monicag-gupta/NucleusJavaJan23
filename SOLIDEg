Principle Name : What it says?
SRP: Single Responsibility Principle
One class should have one and only one reasonability
OCP: Open Closed Principle
Software components should be open for extension, but closed for modification
LSP: Liskov Substitution Principle
Derived types must be completely substitutable for their base types
ISP: Interface Segregation Principle
Clients should not be forced to implement unnecessary methods which they will not use
DIP: Dependency Inversion Principle
Depend on abstractions, not on concretions




SRP:

package solidPkg;
@FunctionalInterface
interface Op{
    int mathOperation(int x, int y);
    default int save(int res){
        return res;
    }
}

public class SRP {
    public static void main(String[] args) {
        Op add=(x,y)->x+y;
        Op sub=(x,y)->x-y;
        System.out.println(add.save(add.mathOperation(3,4)));
    }
    
}




LSP:
package solidPkg;
class Bird{
    public void fly(){
        System.out.println("All birds fly");
    }
}
class Crow extends Bird{
    @Override
    public void fly(){
        System.out.println("Crows fly");
    }
}
class Ostrich extends Bird{
    @Override
    public void fly(){
        throw new ArithmeticException("I cannot fly...NOT in LSP");
    }
}
class CheckBirds{
    static void checkflight(Bird b){
        b.fly();
    }
}


public class LSPEg {
    public static void main(String[] args) {
        CheckBirds.checkflight(new Bird());
        CheckBirds.checkflight(new Crow());
        CheckBirds.checkflight(new Ostrich());
        CheckBirds.checkflight(new Bird());
    }
}






package solidPkg;
class FlyingBird{
    public void fly(){
        System.out.println("All birds fly");
    }
}
class NonFlyingBird{
    
}

class Crow extends FlyingBird{
    @Override
    public void fly(){
        System.out.println("Crows fly");
    }
}
class Ostrich extends NonFlyingBird{
//    @Override
//    public void fly(){
//        throw new ArithmeticException("I cannot fly...NOT in LSP");
//    }
}
class CheckBirds{
    static void checkflight(FlyingBird b){
        b.fly();
    }
}


public class LSPEg {
    public static void main(String[] args) {
        CheckBirds.checkflight(new FlyingBird());
        CheckBirds.checkflight(new Crow());
//        CheckBirds.checkflight(new Ostrich());
        CheckBirds.checkflight(new FlyingBird());
    }
}



NOT in LSP:

package solidPkg;

import com.sun.jdi.connect.VMStartException;

interface Loan{
    public int emi(int p, int t);
}

public class LoanLSPEg {
    public static void main(String[] args) {
        Loan citizen=(p,t)->p*t*10;
        Loan warWidowFundCitizen=(p,t)-> {
            throw new ArithmeticException("War Widow Fund: Not in LSP");
        };
        System.out.println(citizen.emi(10000,20));
        System.out.println(warWidowFundCitizen.emi(10000,20));
    }
}




package solidPkg;

import com.sun.jdi.connect.VMStartException;

interface Loan{
    public int emi(int p, int t);
}
interface LoanReImbursed{
//    public int emi(int p, int t);
    void noEmi();
}

public class LoanLSPEg {
    public static void main(String[] args) {
        Loan citizen=(p,t)->p*t*10;
        LoanReImbursed warWidowFundCitizen=()-> System.out.println("War Widow Fund : LSP");
        System.out.println(citizen.emi(10000,20));
        warWidowFundCitizen.noEmi();
    }
}







package solidPkg;
interface DisConverter{
    int m2Km(int m);
    int cm2M(int cm);
}
interface TempConverter{
    int Cel2Far(int cel);
    int kel2Far(int Kel);
    int far2Cel(int far);
}
class DistanceConverter implements DisConverter{

//    @Override
//    public int Cel2Far(int cel) {
//        return 0;
//    }
//
//    @Override
//    public int kel2Far(int Kel) {
//        return 0;
//    }
//
//    @Override
//    public int far2Cel(int far) {
//        return 0;
//    }

    @Override
    public int m2Km(int m) {
        return 0;
    }

    @Override
    public int cm2M(int cm) {
        return 0;
    }
}
public class ISPEg {
}






DIP:
package solidPkg;

import java.security.spec.RSAOtherPrimeInfo;
interface HotDrink{
    void serve();
}
class Tea implements HotDrink{
    public void serve(){
        System.out.println("Serve Tea");
    }
}
class Coffee implements HotDrink{
    public void serve(){
        System.out.println("Serve Coffee");
    }
}
class Restaurant{
    HotDrink h;
    Restaurant(HotDrink h){
        this.h=h;
    }
    void order(){
        h.serve();
    }
}

public class DIPEg {
    public static void main(String[] args) {
        Restaurant r=new Restaurant(new Tea());
        r.order();
        r=new Restaurant(new Coffee());
        r.order();
    }
}

