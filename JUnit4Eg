<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        
        
        
        
        
        <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.example</groupId>
    <artifactId>Prj2</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>





package source;
public class MainClass {
    public static int findMax(int arr[]) {
        int max = 0;
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        // int max=arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (max < arr[i])
                max = arr[i];
        }
        return max;
    }
    public static int cube(int n) {
        if(n<0)
            throw new NumberFormatException("Incorrect value for cube");
        return n * n * n;
    }
}





package tests;
import source.*;
import static org.junit.Assert.*;
import org.junit.Test;

public class TestLogic {

    @Test
    public void test() {
        assertEquals(4,MainClass.findMax(new int[]{1,3,4,2}));

    }

}



The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases.
@Test annotation specifies that method is the test method.
@Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second).
SetUp Code:
@BeforeClass annotation specifies that method will be invoked only once, before starting all the tests.
@Before annotation specifies that method will be invoked before each test.
TearDown Code:
@After annotation specifies that method will be invoked after each test.
@AfterClass annotation specifies that method will be invoked only once, after finishing all the tests.




The org.junit.Assert class provides methods to assert the program logic.
Methods of Assert class
void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded.
void assertTrue(boolean condition): checks that a condition is true.
void assertFalse(boolean condition): checks that a condition is false.
void assertNull(Object obj): checks that object is null.
void assertNotNull(Object obj): checks that object is not null.






package tests;

import static org.junit.Assert.*;
import org.junit.*;
import source.*;

public class TestCases {
    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
        System.out.println("before all tests");
    }

    @Before
    public void setUp() throws Exception {
        System.out.println("before each test");
    }

    @Test
    public void testFindMax() {
        System.out.println("test case1,2 find max");
        assertEquals(4, MainClass.findMax(new int[] { 1, 3, 4, 2 }));
        assertEquals(2, MainClass.findMax(new int[] { -12, -3, -4, 2 }));
    }

    @Test
    public void testCube() {
        System.out.println("test case cube");
        assertEquals(27, MainClass.cube(3));
    }

    @After
    public void tearDown() throws Exception {
        System.out.println("after each test");
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
        System.out.println("after all tests");
    }
}



