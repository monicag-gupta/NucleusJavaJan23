Spring Security provides its own set of authentication features. 
Specifically, Spring Security currently supports authentication integration with all of these technologies:
<b>HTTP BASIC authentication headers (an IEFT RFC-based standard)</b>
<b>HTTP Digest authentication headers (an IEFT RFC-based standard)</b>
HTTP X.509 client certificate exchange (an IEFT RFC-based standard)
LDAP (a very common approach to cross-platform authentication needs, especially in large environments)
<b>Form-based authentication (for simple user interface needs) </b>
<b>OpenID authentication</b>
Authentication based on pre-established request headers (such as Computer Associates Siteminder)
JA-SIG Central Authentication Service (otherwise known as CAS, which is a popular open source single sign on system)
Transparent authentication context propagation for Remote Method Invocation (RMI) and HttpInvoker (a Spring remoting protocol)
<b>Automatic "remember-me" authentication (so you can tick a box to avoid re-authentication for a 
predetermined period of time)</b>
Anonymous authentication (allowing every call to automatically assume a particular security identity)



Run-as authentication (which is useful if one call should proceed with a different security identity)
Java Authentication and Authorization Service (JAAS)
JEE container authentication (so you can still use Container Managed Authentication if desired)
Kerberos
Java Open Source Single Sign On (JOSSO) *
OpenNMS Network Management Platform *
AppFuse *
AndroMDA *
Mule ESB *
Direct Web Request (DWR) *
Grails *
Tapestry *
JTrac *
Jasypt *
Roller *
Elastic Path *
Atlassian Crowd *
Your own authentication systems



Spring’s FilterChain:

BasicAuthenticationFilter: Tries to find a Basic Auth HTTP Header on the request and if found, tries to authenticate the user with the header’s username and password.
UsernamePasswordAuthenticationFilter: Tries to find a username/password request parameter/POST body and if found, tries to authenticate the user with those values.
DefaultLoginPageGeneratingFilter: Generates a login page for you, if you don’t explicitly disable that feature. THIS filter is why you get a default login page when enabling Spring Security.
DefaultLogoutPageGeneratingFilter: Generates a logout page for you, if you don’t explicitly disable that feature.
FilterSecurityInterceptor: Does your authorization.




Spring 3.x Security Framework provides the following Features:
Authentication and Authorization.
Supports BASIC,Digest and Form-Based Authentication.
Supports LDAP Authentication.
Supports OpenID Authentication.
Supports SSO (Single Sign-On) Implementation.
Supports Cross-Site Request Forgery (CSRF) Implementation.
Supports “Remember-Me” Feature through HTTP Cookies.
Supports Implementation of ACLs
Supports “Channel Security” that means automatically switching between HTTP and HTTPS.
Supports I18N (Internationalisation).
Supports JAAS (Java Authentication and Authorization Service).
Supports Flow Authorization using Spring WebFlow Framework.
Supports WS-Security using Spring Web Services.
Supports Both XML Configuration and Annotations. Very Less or minimal XML Configuration.






Design a Maven archtype-webapp project:
SpringSecurityLoginExample
Add the packages and classes as
   com.springsecure package
       AppConfig.java
       MvcWebApplicationInitializer.java
       SecurityWebApplicationInitializer.java
       WebSecurityConfig.java
   com.springsecure.controller package
       HomeController.java
Add the folder views in WEB-INF. Add index.jsp there
Add dependencies in pom.xml






 <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    </dependencies>





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>SprSecurePrj2</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>11</java.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>5.2.15.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    </dependencies>

</project>






package com.springsecure;
import org.springframework.context.annotation.Bean;  
import org.springframework.context.annotation.ComponentScan;  
import org.springframework.context.annotation.Configuration;  
import org.springframework.web.servlet.config.annotation.EnableWebMvc;  
import org.springframework.web.servlet.view.InternalResourceViewResolver;  
import org.springframework.web.servlet.view.JstlView;  
@EnableWebMvc  
@Configuration  
@ComponentScan({ "com.springsecure.controller.*" })  
public class AppConfig {  
    @Bean  
    public InternalResourceViewResolver viewResolver() {  
        InternalResourceViewResolver viewResolver  
                          = new InternalResourceViewResolver();  
        viewResolver.setViewClass(JstlView.class);  
        viewResolver.setPrefix("/WEB-INF/views/");  
        viewResolver.setSuffix(".jsp");  
        return viewResolver;  
    }  	} 





package com.springsecure;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;  
public class MvcWebApplicationInitializer extends  
        AbstractAnnotationConfigDispatcherServletInitializer {  
    @Override  
    protected Class<?>[] getRootConfigClasses() {  
        return new Class[] { WebSecurityConfig.class };  
    }  
    @Override  
    protected Class<?>[] getServletConfigClasses() {  
 		return null;  
    }  
    @Override  
    protected String[] getServletMappings() {  
        return new String[] { "/" };  
    }  
} 








package com.springsecure;
import org.springframework.security.web.context.*;  
public class SecurityWebApplicationInitializer  extends AbstractSecurityWebApplicationInitializer {  
  
} 
/*
Configure the springSecurityFilterChain
The SecurityWebApplicationInitializer will do the following things:
Automatically register the springSecurityFilterChain Filter for every URL in your application
Add a ContextLoaderListener that loads the WebSecurityConfig
*/






package com.springsecure;
import org.springframework.context.annotation.*;   import org.springframework.security.config.annotation.web.builders.HttpSecurity;  	import org.springframework.security.config.annotation.web.configuration.*;  import org.springframework.security.core.userdetails.User;  	import org.springframework.security.core.userdetails.UserDetailsService;  import org.springframework.security.provisioning.InMemoryUserDetailsManager;  	import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;  
@EnableWebSecurity  
@ComponentScan("com.springsecure")  
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {  
      @Bean  
  public UserDetailsService userDetailsService() {  
      InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();  
      manager.createUser(User.withDefaultPasswordEncoder()  
      .username("admin").password("java").roles("ADMIN").build());  
      return manager;  	  }  
      @Override  
  protected void configure(HttpSecurity http) throws Exception {  
       http                              
      .authorizeRequests()  
          .anyRequest().hasRole("ADMIN")  
          .and().formLogin().and()  
      .httpBasic()  
      .and()  
      .logout()  
      .logoutUrl("/j_spring_security_logout")  
      .logoutSuccessUrl("/")  	      ;  
  }  	} 







