SELECT last_name, salary
FROM   employees
WHERE  salary >
               (SELECT salary
                FROM   employees
                WHERE  last_name = 'Abel');



SELECT last_name, job_id, salary
FROM   employees
WHERE  job_id =  
                (SELECT job_id
                 FROM   employees
                 WHERE  last_name = 'Abel')
AND    salary >
                (SELECT salary
                 FROM   employees
                 WHERE  last_name = 'Abel');



SELECT employee_id, last_name, job_id, salary
FROM   employees
WHERE  salary < ANY
                    (SELECT salary
                     FROM   employees
                     WHERE  job_id = 'IT_PROG')
AND    job_id <> 'IT_PROG';



SELECT employee_id, last_name, job_id, salary
FROM   employees
WHERE  salary < ALL
                    (SELECT salary
                     FROM   employees
                     WHERE  job_id = 'IT_PROG')
AND    job_id <> 'IT_PROG';




SELECT * FROM departments
WHERE NOT EXISTS
(SELECT * FROM employees
 WHERE employees.department_id=departments.department_id);
 
 
 
 SELECT * FROM departments
WHERE NOT EXISTS
(SELECT * FROM employees, departments
 WHERE employees.department_id=departments.department_id);





SELECT emp.last_name
FROM   employees emp
WHERE  emp.employee_id NOT IN
                           (SELECT mgr.manager_id
                            FROM   employees mgr);


SELECT emp.last_name
FROM   employees emp
WHERE  emp.employee_id IN
                           (SELECT mgr.manager_id
                            FROM   employees mgr);


SELECT last_name, employee_id, manager_id
FROM   employees
WHERE  employee_id  NOT IN
    (SELECT distinct manager_id  FROM  employees 
    where manager_id is not null);





SELECT employee_id, job_id
FROM   employees
UNION
SELECT employee_id, job_id
FROM   job_history;



SELECT employee_id, job_id, department_id
FROM   employees
UNION ALL
SELECT employee_id, job_id, department_id
FROM   job_history
ORDER BY  employee_id;



SELECT employee_id, job_id
FROM   employees
INTERSECT
SELECT employee_id, job_id
FROM   job_history;



SELECT employee_id
FROM   employees
MINUS
SELECT employee_id
FROM   job_history;






CREATE VIEW 	empvu80
 AS SELECT  employee_id, last_name, salary
    FROM    employees
    WHERE   department_id = 80;



DESCRIBE empvu80


CREATE VIEW 	salvu50
 AS SELECT  employee_id ID_NUMBER, last_name NAME,
            salary*12 ANN_SALARY
    FROM    employees
    WHERE   department_id = 50;




SELECT *
FROM   salvu50;



CREATE OR REPLACE VIEW dept_sum_vu
  (name, minsal, maxsal, avgsal)
AS SELECT   d.department_name, MIN(e.salary), 
            MAX(e.salary),AVG(e.salary)
   FROM     employees e JOIN departments d
   ON       (e.department_id = d.department_id)
   GROUP BY d.department_name;



CREATE OR REPLACE VIEW empvu80
  (id_number, name, sal, department_id)
AS SELECT  employee_id, first_name || ' ' 
           || last_name, salary, department_id
   FROM    employees
   WHERE   department_id = 80;




You can usually perform DML operations on simple views.
You cannot remove a row if the view contains the following:
Group functions
A GROUP BY clause
The DISTINCT keyword
The pseudocolumn ROWNUM keyword



CREATE OR REPLACE VIEW empvu20
AS SELECT	*
   FROM     employees
   WHERE    department_id = 20
   WITH CHECK OPTION CONSTRAINT empvu20_ck ;




CREATE OR REPLACE VIEW empvu10
    (employee_number, employee_name, job_title)
AS SELECT	employee_id, last_name, job_id
   FROM     employees
   WHERE    department_id = 10
   WITH READ ONLY ;





DROP VIEW empvu80;



CREATE INDEX 	emp_last_name_idx
ON 		employees(last_name);


DROP INDEX emp_last_name_idx;


CREATE SYNONYM  d_sum
FOR  dept_sum_vu;



DROP SYNONYM d_sum;



Please obtain read catalog privilege
from your database administrator:

SQL> grant SELECT_CATALOG_ROLE to MONICA;
Grant succeeded.

SQL> grant SELECT ANY DICTIONARY to MONICA;
Grant succeeded.


select e.job_id, r.job_id
from employees e
join job_history r on (r.job_id = e.job_id)
join departments d on (d.department_id = e.department_id)
where e.employee_id <= 300
and d.department_name in ('IT','Marketing');



explain plan for
select e.job_id, r.job_id
from employees e
join job_history r on (r.job_id = e.job_id)
join departments d on (d.department_id = e.department_id)
where e.employee_id <= 300
and d.department_name in ('IT','Marketing');




SELECT *
FROM table(DBMS_XPLAN.DISPLAY (FORMAT=>'ALL +OUTLINE'));




The important feature of this example is that I am using FORMAT=>'ALL +OUTLINE'. 
Some of you might have come across the undocumented option, FORMAT=>'ADVANCED'. 
I am not using it here because the content of its output has the potential to be different between releases, but there's no fundamental reason why you can't use it. 
The 'ALL' format is documented and 'OUTLINE' is mentioned briefly; its basic content is unlikely to change between releases.




Display the names of the constraints in the table student:
select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME
from USER_CONSTRAINTS
where TABLE_NAME='STUDENT';


In Oracle, use the view user_constraints to display the names of the constraints in the database. The column constraint_name contains the name of the constraint, constraint_type indicates the type of constraint, and table_name contains the name of the table to which the constraint belongs. In the column constraint_type, the value “R” is for the foreign key, “P” is for the primary key, “U” is for the uniqueness constraint, and “C” is for the constraint check. In our example, there is a constraint in the table student of the type P (primary key) whose name is SYS_C007374.



SELECT a.table_name, a.column_name, a.constraint_name, c.owner, 
       -- referenced pk
       c.r_owner, c_pk.table_name r_table_name, c_pk.constraint_name r_pk
  FROM all_cons_columns a
  JOIN all_constraints c ON a.owner = c.owner
                        AND a.constraint_name = c.constraint_name
  JOIN all_constraints c_pk ON c.r_owner = c_pk.owner
                           AND c.r_constraint_name = c_pk.constraint_name
 WHERE c.constraint_type = 'R'
   AND a.table_name = :TableName




CREATE INDEX emp_last_name_i  ON employees(last_name);



SELECT * FROM employees WHERE last_name = 'Sans';

SELECT * FROM employees WHERE UPPER(last_name) = 'SANS';

EXPLAIN PLAN FOR
SELECT * FROM employees
WHERE UPPER(last_name) = 'SANS';

SELECT 
    PLAN_TABLE_OUTPUT 
FROM 
    TABLE(DBMS_XPLAN.DISPLAY());



CREATE INDEX emp_last_name_fi
ON employees(UPPER(last_name));















