Exception Name
Description
Error Number
CURSOR_ALREADY_OPEN
When you open a cursor that is already open.
ORA-06511
INVALID_CURSOR
When you perform an invalid operation on a cursor like closing a cursor, fetch data from a cursor that is not opened.
ORA-01001
NO_DATA_FOUND
When a SELECT...INTO clause does not return any row from a table.
ORA-01403
TOO_MANY_ROWS
When you SELECT or fetch more than one row into a record or variable.
ORA-01422
ZERO_DIVIDE
When you attempt to divide a number by zero.
ORA-01476


DECLARE 
	c_id customers.id%type := 8; 
	c_name customers.name%type; 
	c_addr customers.address%type; 
BEGIN 
	SELECT name, address INTO c_name, c_addr FROM customers WHERE id = c_id; 
	DBMS_OUTPUT.PUT_LINE ('Name: '|| c_name); DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr); 
EXCEPTION 
	WHEN no_data_found THEN 
        dbms_output.put_line('No such customer!'); 
	WHEN others THEN dbms_output.put_line('Error!');
 END;
 /





create table product(product_id number primary key, product_desc varchar2(100));
create table product_rates(product_id number, rate number(5,2), foreign key(product_id) references product(product_id));

insert into product values(100, 'Toys');
insert into product values(104, 'books');
insert into product values(105, 'Laptops');

insert into product_rates values(100, 20);
insert into product_rates values(104, 70);

delete from product;
Error report -
ORA-02292: integrity constraint (MONICA.SYS_C007467) violated - child record found





DECLARE 
	Child_rec_exception EXCEPTION;
 	PRAGMA EXCEPTION_INIT (Child_rec_exception, -2292); 
BEGIN 
	Delete FROM product where product_id= 104;
EXCEPTION 
	WHEN Child_rec_exception THEN 
	Dbms_output.put_line('Child records are present for this product_id.');
END; 
/





create table depts as select * from departments;

DECLARE 
  v_did NUMBER := 500;
  v_dname VARCHAR2(20) := 'Testing';
  e_exp_dept EXCEPTION;
BEGIN
  UPDATE depts
  SET department_name = v_dname
  WHERE department_name = v_dname;
  IF SQL%NOTFOUND THEN
    RAISE e_exp_dept;
  END IF;
  COMMIT;
EXCEPTION
WHEN e_exp_dept THEN
  DBMS_OUTPUT.PUT_LINE('No such department id.');
END;
/






DECLARE
 c_id customers.id%type := &cc_id;
 c_name customers.name%type;
 c_addr customers.address%type; 
-- user defined exception 
ex_invalid_id EXCEPTION; 
BEGIN 
	IF c_id <= 0 THEN RAISE ex_invalid_id; 
	ELSE 
	SELECT name, address INTO c_name, c_addr FROM customers WHERE id = c_id; 
	DBMS_OUTPUT.PUT_LINE ('Name: '|| c_name);
	DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr); 
	END IF; 
EXCEPTION 
	WHEN ex_invalid_id THEN 
	dbms_output.put_line('ID must be greater than zero!'); 
	WHEN no_data_found THEN 
	dbms_output.put_line('No such customer!'); 
	WHEN others THEN dbms_output.put_line('Error!'); 
END; 
/




The General Syntax to use this procedure is:
RAISE_APPLICATION_ERROR (error_number, error_message); 
• The Error number must be between -20000 and -20999 
• The Error_message is the message you want to display when the error occurs.
Steps to be followed to use RAISE_APPLICATION_ERROR procedure: 
1. Declare a user-defined exception in the declaration section. 
2. Raise the user-defined exception based on a specific business rule in the execution section. 
3. Finally, catch the exception and link the exception to a user-defined error number in RAISE_APPLICATION_ERROR.




create table emp as select employee_id as id,manager_id as mgr, salary from employees; 

DECLARE
	v_mgr emp.mgr%type := 534;
BEGIN
  DELETE FROM emp
     WHERE  mgr= v_mgr;
  IF SQL%NOTFOUND THEN
     RAISE_APPLICATION_ERROR(-20202,
       'This is not a valid manager');
  END IF;
  end;
/






CREATE [OR REPLACE] PROCEDURE procedure_name [ (parameter [,parameter]) ] 
IS 
[declaration_section]
 BEGIN 
executable_section
 [EXCEPTION exception_section] 
END [procedure_name];



















