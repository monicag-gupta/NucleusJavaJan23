To execute a statement against a database, the following flow is observed
Load the driver (Only performed once)
Obtain a Connection to the database (Save for later use)
Obtain a Statement object from the Connection
Use the Statement object to execute SQL.  Updates, inserts and deletes return Boolean.  Selects return a ResultSet
Navigate ResultSet, using data as required
Close ResultSet
Close Statement

Do NOT close the connection after every statement
The same connection object can be used to create further statements
A Connection may only have one active Statement at a time.  Do not forget to close the statement when it is no longer needed.
Close the connection when you no longer need to access the database



Types of Statements:
Statement
Use for general-purpose access to your database. Useful when you are using static SQL statements at runtime. The Statement interface cannot accept parameters. 
PreparedStatement 
Use when you plan to use the SQL statements many times. The PreparedStatement interface accepts input parameters at runtime. 
CallableStatement 
Use when you want to access database stored procedures. The CallableStatement interface can also accept runtime input parameters. 



Execute methods:
boolean execute(String SQL) 
Returns a boolean value of true if a ResultSet object can be retrieved; otherwise, it returns false. Use this method to execute SQL DDL statements or when you need to use truly dynamic SQL.
int executeUpdate(String SQL) 
Returns the numbers of rows affected by the execution of the SQL statement. Use this method to execute SQL statements for which you expect to get a number of rows affected - for example, an INSERT, UPDATE, or DELETE statement.
ResultSet executeQuery(String SQL) 
Returns a ResultSet object. Use this method when you expect to get a result set, as you would with a SELECT statement.





Create table EmpTbl(id int, name varchar(30), salary int);

Insert some arbitrary records in EmpTbl:

insert into Emptbl values (101,'Emp1',80000);
insert into Emptbl values (102,'Emp2',81000);
commit;






        
    
    
    <dependency>
            <groupId>com.oracle</groupId>
            <artifactId>ojdbc14</artifactId>
            <version>10.2.0.5</version>
        </dependency>
        
        
  
  
  
  import java.sql.*;
public class MainRead {
	public static void main(String args[]) {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection con = DriverManager.getConnection(
					"jdbc:oracle:thin:@10.1.50.198:1535:nsbt19c", "sh", "sh");
					
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("select * from Emptbl"); // emptbl
			while (rs.next())
				System.out.println(rs.getInt(1) + "  " + rs.getString(2) + "  "	+ rs.getInt(3));
			// add ojdbc6.jar in your project library
			con.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}





import java.sql.*;

public class MainInsert {
    public static void main(String args[]) throws Exception {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        Connection con = DriverManager.getConnection(
                "jdbc:oracle:thin:@localhost:1521:orcl", "monica", "gupta");
        Statement stmt = con.createStatement();
        int result = stmt.executeUpdate("insert into EmpTbl values(103,'Emp3',50000)");
        // int result=stmt.executeUpdate("update EmpTbl set name='Emp33',salary= 70000 where id=103");
        // int result=stmt.executeUpdate("delete from EmpTbl where id=103");
        System.out.println(result + " records affected");
        con.close();
    }
}




import java.sql.*;
public class InsertPrepared {
    public static void main(String args[]) {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = DriverManager.getConnection(
                    "jdbc:oracle:thin:@localhost:1521:orcl", "monica", "gupta");
            PreparedStatement stmt = con.prepareStatement("insert into EmpTbl(id, name, salary) values(?,?,? )");
            stmt.setInt(1, 103);// 1 specifies the first parameter in the query
            stmt.setString(2, "Emp103");
            stmt.setInt(3, 50000);
            int i = stmt.executeUpdate();
            System.out.println(i + " records inserted");
            con.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }	}






public class Emptbl {
	private int id;
	private String name;
	private int salary;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	public String toString() {
		return "Emptbl [id=" + id + ", name=" + name + ", salary=" + salary
				+ "]";
	}
	
	public Emptbl(int id, String name, int salary) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
	}
	public Emptbl() {
		
	}
	

}





package oraJdbcPkg;

import java.sql.*;
import java.util.*;

public class DaoEmpTbl {
    Connection con = null;
    Statement stmt=null;

    public DaoEmpTbl() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection(
                    "jdbc:oracle:thin:@localhost:1521:orcl", "hr", "hr");
            stmt = con.createStatement();
        } catch (Exception e) {
        }
    }
    public void conn() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection(
                    "jdbc:oracle:thin:@localhost:1521:orcl", "monica", "gupta");
            stmt = con.createStatement();
        } catch (Exception e) {
        }
    }

    public int save(Emptbl e) {
        conn();
        try {
            String s = "insert into EmpTbl values(" + e.getId() + ",'"
                    + e.getName() + "'," + e.getSalary() + ")";

            return stmt.executeUpdate(s);
        } catch (SQLException e1) {
            return 0;
        }
    }
    public int update(Emptbl e) {
        conn();
        try {
            String s = "update EmpTbl set name='" +
                    e.getName() +"',salary= " + e.getSalary()+ ", id = " + e.getId()+ " where id=" + e.getId();

            return stmt.executeUpdate(s);
        } catch (SQLException e1) {
            return 0;
        }
    }
    public int delete(Emptbl e) {
        conn();
        try {
            String s = "delete from EmpTbl where id=" + e.getId();

            return stmt.executeUpdate(s);
        } catch (SQLException e1) {
            return 0;
        }
    }
    public List<Emptbl> select() {
        conn();
        List<Emptbl> emps=null;
        try {
            ResultSet rs = stmt.executeQuery("select * from Emptbl"); // emptbl
            emps=new ArrayList<>();
            while (rs.next()){
                Emptbl e=new Emptbl(rs.getInt(1), rs.getString(2),rs.getInt(3));
                emps.add(e);
            }
            return emps;

        } catch (SQLException e1) {
            return emps;
        }
    }
}







import java.util.*;
public class MainClass {
	public static void main(String[] args) {
		Emptbl e=new Emptbl(70, "Abcx",90000);
		DaoEmpTbl edao=new DaoEmpTbl();
		edao.save(e);
		System.out.println("Inserted");
		List<Emptbl> l=edao.select();
		System.out.println(l);
		e=new Emptbl(70, "Abcx",95000);
		edao.update(e);
		System.out.println("Updated");
		l=edao.select();
		System.out.println(l);
		e=new Emptbl(70, "Abcx",95000);
		edao.delete(e);
		System.out.println("Deleted");
		l=edao.select();
		System.out.println(l);
	}
}






package oraJdbcPkg;
import java.io.*;
import java.sql.*;

public class TransEg {
         public static void main(String[] args) {
            PreparedStatement ps = null;
            try {
                Class.forName("oracle.jdbc.driver.OracleDriver");
                Connection con = DriverManager.getConnection(
                        "jdbc:oracle:thin:@localhost:1521:orcl", "monica", "gupta");
                con.setAutoCommit(false);
                System.out.println("Opened database successfully");
                ps=con.prepareStatement("insert into Emptbl values(?,?,?)");
                BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
                while(true){
                    System.out.println("enter id");
                    String s1=br.readLine();
                    int id=Integer.parseInt(s1);
                    System.out.println("enter name");
                    String name=br.readLine();
                    System.out.println("enter salary");
                    String s3=br.readLine();
                    int salary=Integer.parseInt(s3);
                    ps.setInt(1,id);
                    ps.setString(2,name);
                    ps.setInt(3,salary);
                    ps.executeUpdate();

                    System.out.println("commit/rollback");
                    String answer=br.readLine();
                    if(answer.equals("commit")){
                        con.commit();
                    }
                    if(answer.equals("rollback")){
                        con.rollback();
                    }
                    System.out.println("Want to add more records y/n");
                    String ans=br.readLine();
                    if(ans.equals("n")){
                        break;
                    }  }
                con.commit();
                System.out.println("record successfully saved");

                con.close();//before closing connection commit() is called
            }catch(Exception e){System.out.println(e);}

         }}







