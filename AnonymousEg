package innerClassPkg;
interface C{
    void fn();
}
class A{
    void localClassFn(){
        class B implements C{
            public void fn(){
                System.out.println("This is from local inner class");
            }
        }
        C b=new B();
        b.fn();

    }
}
public class AnnonymousEg {
    public static void main(String[] args) {
        A a=new A();
        a.localClassFn();
    }
}





package innerClassPkg;
interface C{
    void fn();
}
class D{
    void fnD(){
        System.out.println("fnD in D class");
    }
}
abstract class E{
    abstract void fnE();
}

public class AnnonymousEg {
//    class A implements C{ //AnnonymousEg$A
//        public void fn(){
//            System.out.println();
//        }
//    }
    public static void main(String[] args) {
       C c=new C(){       //AnnonymousEg$1
           public void fn(){
            System.out.println();
        }
       };
       c.fn();
       D d=new D(){  //AnnonymousEg$2
           void fnD(){
               System.out.println("fnD in D, AnnonymousEg$2");
           }
       };
       d.fnD();
       E e=new E(){
         void fnE(){
             System.out.println("fnE in E, AnnonymousEg$3");
         }
       };
       e.fnE();
    }
}




package innerClassPkg;
@FunctionalInterface
interface King{
    void chotaBheem(); //SAM : Single Abstract Method
    default void chutki(){
        System.out.println("Default Method: Chutki of King");
    }
}
//class Fighter implements King{
//    public void chotaBheem(){
//        System.out.println("Kalaripayattu");
//    }
//}
public class LambdaEg {
    

    public static void main(String[] args) {
//        King k=new King(){
//            public void chotaBheem(){
//                System.out.println("Kalaripayattu");
//            }
//        };
       
        
        King k = () -> System.out.println("Kalaripayattu");
        k.chotaBheem();
        k.chutki();
        
    }
}




