void persist(Object entity) : persists the given object.
Serializable save(Object entity) : persists the given object and returns id.
void saveOrUpdate(Object entity) : persists or updates the given object. If id is found, it updates the record otherwise saves the record.
void update(Object entity) : updates the given object.
void delete(Object entity) : deletes the given object on the basis of id.
Object get(Class entityClass, Serializable id) : returns the persistent object on the basis of given id. Returns null if not found.
Object load(Class entityClass, Serializable id) : returns the persistent object on the basis of given id. Return an exception if not found.
List loadAll(Class entityClass) : returns the all the persistent objects.




By using @Transactional, many important aspects such as transaction propagation are handled automatically. 




SpringHbmPrj1
create table in the database 
Create SpringHbmPrj1 as Java Project
Package com.hibernate
Resources -> applicationContext.xml 
It contains information of DataSource, SessionFactory etc.
Employee.java
It is the persistent class
EmployeeDao.java
It is the dao class that uses HibernateTemplate.
InsertTest.java 
It calls methods of EmployeeDao class.



Create table Employee:
Drop table EMPLOYEE;
Create table Employee(id int not null, name varchar(255), salary real, Primary Key(id));




Employee
package com.hibernate;
import javax.persistence.*;
@Entity
public class Employee {
    @Id
    private int id;
    private String name;
    private float salary;
    public Employee() {}
    public Employee(int id, String name, float salary) {
        this.id = id;  this.name = name;  this.salary = salary;   }
    public int getId() {	return id;	}
    public void setId(int id) {	this.id = id;	}
    public String getName() {	return name;	}
    public void setName(String name) {	this.name = name;	}
    public float getSalary() {	return salary;	}
    public void setSalary(float salary) {	this.salary = salary;	}
    public String toString(){	return id+" "+name+" "+salary;	}
}





EmployeeDao
package com.hibernate;
import java.util.*;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.transaction.annotation.Transactional;  
public class EmployeeDao {  
	HibernateTemplate template;
	public void setTemplate(HibernateTemplate template) {  this.template = template;  	}  
	@Transactional(readOnly = false)
	public void saveEmployee(Employee e){  	template.save(e); 	}  
	@Transactional(readOnly = false)  
	public void updateEmployee(Employee e){  	template.update(e); }  
	@Transactional(readOnly = false)  
	public void deleteEmployee(Employee e){  template.delete(e);  }  
	@Transactional(readOnly = false)
	public Employee getById(int id){  Employee e=(Employee)template.get(Employee.class,id);	return e; 	}  
	@Transactional(readOnly = false) 
	public List<Employee> getEmployees(){  
		List<Employee> list=new ArrayList<Employee>();  
		list=template.loadAll(Employee.class);  
		return list; 	}  }
//If you specify readOnly as true, the flush mode will be set as FlushMode.NEVER in the current Hibernate Session preventing the session from committing the transaction.



<dependencies>
        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.28.Final</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>5.0.1.RELEASE</version>
        </dependency>
        <!-- Thanks for using https://jar-download.com -->

        <dependency>
            <groupId>com.oracle.ojdbc</groupId>
            <artifactId>ojdbc10</artifactId>
            <version>19.3.0.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-hibernate -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-hibernate</artifactId>
            <version>1.2.8</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.0.1.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.0.1.RELEASE</version>
        </dependency>

    </dependencies>
    
    
    
    
    
    
applicationContext.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
       xmlns:tx="http://www.springframework.org/schema/tx">
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
        <property name="username" value="monica" />
        <property name="password" value="gupta" />
    </bean>
    <bean id="mysessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="annotatedClasses"> 
            <list> 
                <value>com.hibernate.Employee </value> 
            </list> 
        </property>

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle12cDialect</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
    <bean id="template" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="mysessionFactory"></property>
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="mysessionFactory" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
    <bean id="d" class="com.hibernate.EmployeeDao">
        <property name="template" ref="template"></property>
    </bean>
</beans>





Test.java
package com.hibernate;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class Test {  
public static void main(String[] args) {  
 	  ApplicationContext ctx=new ClassPathXmlApplicationContext("applicationContext.xml");
    EmployeeDao dao=(EmployeeDao)ctx.getBean("d");  
    Employee e=new Employee(101, "Ishu",50000);  
    dao.saveEmployee(e);  
    }  
} 

