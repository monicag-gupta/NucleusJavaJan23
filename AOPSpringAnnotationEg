@Aspect declares the class as aspect.: Understand all Aspects (PointCut expressions giving JointPoint + Concerns).
@Pointcut declares the pointcut expression.
The annotations used to create advices are given below:
@Before declares the before advice. It is applied before calling the actual method.
@After declares the after advice. It is applied after calling the actual method and before returning result.
@AfterReturning declares the after returning advice. It is applied after calling the actual method and before returning result. But you can get the result value in the advice.
@Around declares the around advice. It is applied before and after calling the actual method.
@AfterThrowing declares the throws advice. It is applied if actual method throws exception.




Pointcut is an expression language of Spring AOP.
The @Pointcut annotation is used to define the pointcut. We can refer the pointcut expression by name also. 
@Pointcut("execution(* Operation.*(..))")  
private void doSomething() {}  
The name of the pointcut expression is doSomething(). It will be applied on all the methods of Operation class regardless of return type.
Understanding Pointcut Expressions:
It will be applied on all the public methods:
@Pointcut("execution(public * *(..))")  
It will be applied on all the public methods of Operation class:
@Pointcut("execution(public Operation.*(..))")  
It will be applied on all the methods of Operation class:
@Pointcut("execution(* Operation.*(..))")  
It will be applied on all the public setter methods of Employee class:
@Pointcut("execution(public Employee.set*(..))")  
It will be applied on all the methods of Operation class that returns int value:
@Pointcut("execution(int Operation.*(..))")  








 <dependencies>

        <!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.9.19</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.19</version>
        </dependency>

    </dependencies>
