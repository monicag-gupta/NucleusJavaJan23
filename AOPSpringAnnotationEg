@Aspect declares the class as aspect.: Understand all Aspects (PointCut expressions giving JointPoint + Concerns).
@Pointcut declares the pointcut expression.
The annotations used to create advices are given below:
@Before declares the before advice. It is applied before calling the actual method.
@After declares the after advice. It is applied after calling the actual method and before returning result.
@AfterReturning declares the after returning advice. It is applied after calling the actual method and before returning result. But you can get the result value in the advice.
@Around declares the around advice. It is applied before and after calling the actual method.
@AfterThrowing declares the throws advice. It is applied if actual method throws exception.




Pointcut is an expression language of Spring AOP.
The @Pointcut annotation is used to define the pointcut. We can refer the pointcut expression by name also. 
@Pointcut("execution(* Operation.*(..))")  
private void doSomething() {}  
The name of the pointcut expression is doSomething(). It will be applied on all the methods of Operation class regardless of return type.
Understanding Pointcut Expressions:
It will be applied on all the public methods:
@Pointcut("execution(public * *(..))")  
It will be applied on all the public methods of Operation class:
@Pointcut("execution(public Operation.*(..))")  
It will be applied on all the methods of Operation class:
@Pointcut("execution(* Operation.*(..))")  
It will be applied on all the public setter methods of Employee class:
@Pointcut("execution(public Employee.set*(..))")  
It will be applied on all the methods of Operation class that returns int value:
@Pointcut("execution(int Operation.*(..))")  








 <dependencies>

        <!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.9.19</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.19</version>
        </dependency>

    </dependencies>
    
    
    
    
    
    
    
    
    
    
    
    
    
    <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>AOPPrj1</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>

        <!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.23.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.9.19</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.19</version>
        </dependency>

    </dependencies>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

</project>









AOPAnnotationPrj
package com.springcore
Restaurant
TestSpringProject
BeforeAdvisor
AfterAdvisor
AroundAdvisor
Beans.xml in resource 








package com.springcore;
public class Restaurant {
    public void greetCustomer(int booking) {
        if(booking == 0)
    throw new ArithmeticException();
   System.out.println("Hello Customers");
    }
   
}





package com.springcore;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class TestSpringProject {
	public static void main(String[] args) {  
		ApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");
		Restaurant restaurantObj = (Restaurant) context.getBean("restaurantBean");
		System.out.println("RestaurantBean Initialised");
		restaurantObj.greetCustomer(10);
	 }  
} 





package com.springcore;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class BeforeAdvisor {

    @Before("execution(* com.springcore.Restaurant.greetCustomer(..))")
    public void logBefore(JoinPoint joinPoint) {

    System.out.println("additional concern (Advertisement) before actual logic");  
    }

}






package com.springcore;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;

@Aspect
public class AfterAdvisor {
	@After("execution(* com.springcore.Restaurant.greetCustomer(..))")
    public void logAfter(JoinPoint joinPoint) {
		System.out.println("additional concern after (finally) advice");   
    }
	@AfterReturning("execution(* com.springcore.Restaurant.greetCustomer(..))")
    public void logAfterReturning(JoinPoint joinPoint) {
		System.out.println("additional concern after returning(vouchers) advice");   
    }
	@AfterThrowing("execution(* com.springcore.Restaurant.greetCustomer(..))")
    public void logAfterThrowing(JoinPoint joinPoint) {
		System.out.println("additional concern if exception (send away customers) occurs");  
    }
	}





package com.springcore;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;

@Aspect
public class AroundAdvisor {
	@Around("execution(* com.springcore.Restaurant.greetCustomer(..))")
    public void logAround(ProceedingJoinPoint joinPoint) throws Throwable {

		System.out.println("additional concern around before actual (take order) logic");  
		joinPoint.proceed(); 
        System.out.println("additional concern around after actual (bill) logic");  
    }
}






<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

    <aop:aspectj-autoproxy />
    <bean id="restaurantBean" class="com.springcore.Restaurant" />
    <!-- Aspect -->
    <bean id="BA" class="com.springcore.BeforeAdvisor" />
     <bean id="AA" class="com.springcore.AfterAdvisor" />
     <bean id="ArA" class="com.springcore.AroundAdvisor" />
</beans>




package com.springcore;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class TestSpringProject {
	public static void main(String[] args) { 
		try {
		ApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");
		Restaurant restaurantObj = (Restaurant) context.getBean("restaurantBean");
		System.out.println("RestaurantBean Initialised");
		restaurantObj.greetCustomer(0);
		}catch(Exception e) {
			System.out.println(e);
		}
	 }  
} 



