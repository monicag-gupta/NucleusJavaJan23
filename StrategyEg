package designPatternsPkg.behavioural.strategyPkg;

public interface Loan {
    int EMI(int p, int t);
}



package designPatternsPkg.behavioural.strategyPkg;

public class HomeLoan implements  Loan{
    @Override
    public int EMI(int p, int t) {
        return p*t*10;
    }
}



package designPatternsPkg.behavioural.strategyPkg;

public class VehicleLoan implements  Loan{
    @Override
    public int EMI(int p, int t) {
        return p*t*12;
    }
}


package designPatternsPkg.behavioural.strategyPkg;

public class LoanEMICalc {
    private Loan l;
    public LoanEMICalc(Loan l){this.l=l;}
    public void EMICalc(int p, int t){
        int emi=l.EMI(p,t);
        System.out.println("Emi: "+ emi);
    }    
}



package designPatternsPkg.behavioural.strategyPkg;

public class Main {
    public static void main(String[] args) {
        LoanEMICalc l1=new LoanEMICalc(new HomeLoan());
        l1.EMICalc(1000,20);
    }
}












Step 1
Create an interface.
Strategy.java
public interface Strategy {
   public int doOperation(int num1, int num2);
}
Step 2
Create concrete classes implementing the same interface.
OperationAdd.java
public class OperationAdd implements Strategy{
   @Override
   public int doOperation(int num1, int num2) {
      return num1 + num2;
   }
}
OperationSubstract.java
public class OperationSubstract implements Strategy{
   @Override
   public int doOperation(int num1, int num2) {
      return num1 - num2;
   }
}
OperationMultiply.java
public class OperationMultiply implements Strategy{
   @Override
   public int doOperation(int num1, int num2) {
      return num1 * num2;
   }
}
Step 3
Create Context Class.
Context.java
public class Context {
   private Strategy strategy;

   public Context(Strategy strategy){
      this.strategy = strategy;
   }

   public int executeStrategy(int num1, int num2){
      return strategy.doOperation(num1, num2);
   }
}
Step 4
Use the Context to see change in behaviour when it changes its Strategy.
StrategyPatternDemo.java
public class StrategyPatternDemo {
   public static void main(String[] args) {
      Context context = new Context(new OperationAdd());		
      System.out.println("10 + 5 = " + context.executeStrategy(10, 5));

      context = new Context(new OperationSubstract());		
      System.out.println("10 - 5 = " + context.executeStrategy(10, 5));

      context = new Context(new OperationMultiply());		
      System.out.println("10 * 5 = " + context.executeStrategy(10, 5));
   }
}
Step 5
Verify the output.
10 + 5 = 15
10 - 5 = 5
10 * 5 = 50


