PL/SQL, you can create your own Procedures.
When you create a Procedure or function, you have to define this three parameters.
1.) IN - IN parameter is referenced to the procedure or function. And value of paramameter in not overwritten.
2.) OUT - OUT parameter is referenced to the procedure or function. And value of paramameter is overwritten allow.
3.) IN OUT - IN OUT parameter is referenced to the procedure or function. And value of paramameter is both overwritten allow or not allow.




CREATE OR REPLACE PROCEDURE greetings
 AS
 BEGIN 
dbms_output.put_line('Hello World!');
 END;
 /



A standalone procedure can be called in two ways:
Using the EXECUTE keyword
Calling the name of the procedure from a PL/SQL block
The above procedure named 'greetings' can be called with the EXECUTE keyword as:

EXECUTE greetings;


The above call would display:
Hello World PL/SQL procedure successfully completed.


The procedure can also be called from another PL/SQL block:


BEGIN 
greetings; 
END; 
/





Deleting a Standalone Procedure
A standalone procedure is deleted with the DROP PROCEDURE statement. Syntax for deleting a procedure is:
DROP PROCEDURE procedure-name; 
So you can drop greetings procedure by using the following statement:


DROP PROCEDURE greetings; 



DECLARE
 a number;
b number; 
c number; 
PROCEDURE findMin(x IN number, y IN number, z OUT number) 
IS 
BEGIN 
IF x < y THEN z:= x; ELSE z:= y; 
END IF; 
END;
BEGIN
 a:= 23; 
b:= 45; 
findMin(a, b, c); 
dbms_output.put_line(' Minimum of (23, 45) : ' || c); 
END;
 /




CREATE OR REPLACE PROCEDURE findMin11(x IN number, y IN number, z OUT number) 
AS 
BEGIN 
IF x < y THEN z:= x; ELSE z:= y; 
END IF; 
END;


DECLARE
 a number;
b number; 
c number; 
BEGIN
 a:= 23; 
b:= 45; 
findMin11(a, b, c); 
dbms_output.put_line(' Minimum of (23, 45) : ' || c); 
END;
 /




There is no difference between is/as ... “IS” is used for creating a new procedure with a new name 
where as ‘AS' is used to create a new procedure with existing procedure name... 
it will not display "procedure already exists".







DECLARE
a number; 
PROCEDURE squareNum(x IN OUT number) 
IS 
BEGIN 
x := x * x; 
END; 
BEGIN 
a:= 23; 
squareNum(a); 
dbms_output.put_line(' Square of (23): ' || a); 
END;
 /





Actual parameters could be passed in three ways:
Positional notation
Named notation
Mixed notation






DECLARE
 a number;
b number; 
c number; 
PROCEDURE findMin(x IN number, y IN number, z OUT number) 
IS 
BEGIN 
IF x < y THEN z:= x; ELSE z:= y; 
END IF; 
END;
BEGIN
 a:= 23; 
b:= 45; 
findMin(y=>a, z=>c, x=>b); 
dbms_output.put_line(' Minimum of (23, 45) : ' || c); 
END;
 /
 
 
 
 DECLARE
 a number;
b number; 
c number; 
PROCEDURE findMin(x IN number, y IN number, z OUT number) 
IS 
BEGIN 
IF x < y THEN z:= x; ELSE z:= y; 
END IF; 
END;
BEGIN
 a:= 23; 
b:= 45; 
findMin(a, z=>c, y=>b); 
dbms_output.put_line(' Minimum of (23, 45) : ' || c); 
END;
 /






CREATE OR REPLACE FUNCTION employer_details_func2
 RETURN VARCHAR2
 IS
emp_name VARCHAR(20); 
BEGIN 
SELECT first_name INTO emp_name
FROM employees WHERE employee_ID = 100;
RETURN emp_name;
END;
/




A function can be executed in the following ways.
1) Since a function returns a value we can assign it to a variable.

employee_name := employer_details_func2;

    If ‘employee_name’ is of datatype varchar we can store the name of the employee by assigning the return type of the function to it.
2) As a part of a SELECT statement

SELECT employer_details_func2 FROM dual;

3) In a PL/SQL Statements like,

	dbms_output.put_line(employer_details_func2);
 
This line displays the value returned by the function.



CREATE OR REPLACE FUNCTION totalCustomers 
RETURN number 
IS total number(5) := 0; 
BEGIN 
SELECT count(*) into total FROM customers; 
RETURN total; 
END;
 /



DECLARE 
c number(5);
BEGIN c := totalCustomers(); 
dbms_output.put_line('Total no. of Customers: ' || c); 
END;
 /









