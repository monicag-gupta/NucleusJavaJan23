package threadPkg;

public class ThreadEg {
    public static void main(String[] args) {
        MyThread1 t1=new MyThread1("t1");
        MyThread1 t2=new MyThread1("t2");
        Thread t3=new Thread(new MyRunnable1("t3"));
        Thread t4=new Thread(new MyRunnable1("t4"));
        Thread t5=new Thread(()->{for(int i=0;i<10;i++) System.out.println("t5" + " : " + i);});
        t1.start();
        t2.start();
        t3.start();
        t4.start();


    }
}




package threadPkg;

public class MyRunnable1 implements Runnable{
    private String name;
    public MyRunnable1(){
        name="MyThread1";
    }
    public MyRunnable1(String name){
        this.name=name;
    }
    @Override
    public void run() {
        for(int i=0;i<10;i++){
            for(int j=0;j<10000;j++);
            System.out.println(name + " : " + i);
        }
    }
}




package threadPkg;

public class MyThread1 extends Thread{
    private String name;
    public MyThread1(){
        name="MyThread1";
    }
    public MyThread1(String name){
        this.name=name;
    }

    @Override
    public void run() {
        for(int i=0;i<10;i++){
            for(int j=0;j<10000;j++);
            System.out.println(name + " : " + i);
        }
    }
}




Thread(): Allocates a new Thread object
Thread(Runnable target): Allocates a new Thread object
Thread(Runnable target, String name): Allocates a new Thread object
Thread(String name): Allocates a new Thread object







package threadPkg;

public class Account {
    public String AccountName;
    public Account(){
        AccountName="";
        balance=1000;
    }
    public Account(String name){
        AccountName=name;
        balance=1000;
    }
    public Account(String name, int bal){
        AccountName=name;
        balance=bal;
    }
    
    int balance;
    // if 'synchronized' is removed, the outcome is unpredictable
    public synchronized void deposit(int deposit_amount) {
        System.out.println("\nDeposit amount" + deposit_amount + " for " + AccountName);
        balance += deposit_amount;		
    }
    public synchronized void withdraw(int deposit_amount) {
        System.out.println("\nWithdrawn amount" + deposit_amount + " for " + AccountName);
        balance -= deposit_amount;		
    }
    public synchronized void enquire() {
        System.out.println("\nBalance=" + balance+ " for " + AccountName);		
    }
}






package threadPkg;

public class DepoThread implements Runnable {
    Account account;
    int amt;
    public DepoThread(Account s, int a) {
        account = s;
        amt = a;
    }
    public void run() {
        account.deposit(amt);
    }
}




package threadPkg;

public class DrawThread implements Runnable {
        Account account;
        int amt;
	public DrawThread(Account s, int a) {
            account = s;
            amt = a;
    }
        public void run() {
            account.withdraw(amt);
    }
}




package threadPkg;

public class BalThread implements Runnable {
    Account account;
	public BalThread(Account s) {
        account = s;  
    }
    public void run() {
        account.enquire(); 	
    }
}






package threadPkg;

public class Main {
    public static void main(String[] args) {
        Account a1=new Account("Armaan", 100000);
        Account a2=new Account("Shalini", 200000);
        Thread dt1 = new Thread(new DepoThread(a1, 10000));
        Thread wt1 = new Thread(new DrawThread(a1, 2000));
        Thread bt1 = new Thread(new BalThread(a1));
        Thread dt2 = new Thread(new DepoThread(a2, 15000));
        Thread wt2 = new Thread(new DrawThread(a2, 20000));
        Thread bt2 = new Thread(new BalThread(a2));
        dt1.start();
        wt1.start();
        bt1.start();
        
        wt2.start();
        dt2.start();
        bt2.start();
        
    }
}






package threadPkg;

public class Account {
    public String AccountName;
    public Account(){
        AccountName="";
        balance=1000;
    }
    public Account(String name){
        AccountName=name;
        balance=1000;
    }
    public Account(String name, int bal){
        AccountName=name;
        balance=bal;
    }

    int balance;
    // if 'synchronized' is removed, the outcome is unpredictable
    public synchronized void deposit(int deposit_amount) {
        System.out.println("\nDeposit amount" + deposit_amount );
        try{
            Thread.sleep(1000);
        }
        catch(Exception e){}
        System.out.println(" for " + AccountName);
        balance += deposit_amount;

    }
    public synchronized void withdraw(int deposit_amount) {
        System.out.println("\nWithdrawn amount" + deposit_amount );
        try{
            Thread.sleep(1000);
        }
        catch(Exception e){}
        System.out.println(" for " + AccountName);
        balance -= deposit_amount;
    }
    public synchronized void enquire() {
        System.out.println("\nBalance=" + balance);
        try{
            Thread.sleep(1000);
        }
        catch(Exception e){}
        System.out.println(" for " + AccountName);
    }
}






package threadPkg;
class A extends Thread {
    String s;
    public A(String str) {s=str;}
    public void run() {
        System.out.println("Thread: " + s + " started");
        for (int i = 1; i <= 4; i++) {
            System.out.println("\t From "+ s+" : i= " + i); 		}
        System.out.println("Exit from " + s);	}
}
public class ThreadPriority {
    public static void main(String args[]) {
        A threadA = new A("ThreadA");
        A threadB = new A("ThreadB");
        A threadC = new A("ThreadC");
        threadC.setPriority(Thread.MAX_PRIORITY);
        threadB.setPriority(threadA.getPriority() + 1);
        threadA.setPriority(Thread.MIN_PRIORITY);
        System.out.println("Started Thread A");
        threadA.start();
        System.out.println("Started Thread B");
        threadB.start();
        System.out.println("Started Thread C");
        threadC.start();
        System.out.println("End of main thread");
    }
}





Methods:
public void suspend()
This method puts a thread in suspended state and can be resumed using resume() method.
public void stop()
This method stops a thread completely.
public void resume()
This method resumes a thread which was suspended using suspend() method.
public void wait()
Causes the current thread to wait until another thread invokes the notify().
public void notify()
Wakes up a single thread that is waiting on this object's monitor.
public void notifyAll()
Wakes up all the threads that called wait( ) on the same object.


These methods have been implemented as final methods in Object, so they are available in all the classes. All three methods (wait, notify, and notifyAll) can be called only from within a synchronized context.
Stop(), Suspend() and Resume() are deprecated in Java 






package threadPkg;

public class Chat {
    boolean flag = false;
    public synchronized void Question(String msg) {
        if (flag) {
            try {		wait();    }
            catch (InterruptedException e) {	e.printStackTrace();	}
        }   
        System.out.println(msg);
        flag = true;
        notify();		
    }
    public synchronized void Answer(String msg) {
        if (!flag) {
            try {		wait();         }
            catch (InterruptedException e) {	e.printStackTrace();	}
        } 
        System.out.println(msg);
        flag = false;
        notify();	
    }
}




package threadPkg;

public class T1 implements Runnable {
    Chat m;
    String[] s1 = { "Hi", "How are you ?", "I am also doing fine!" };
    public T1(Chat m1) {
        this.m = m1;		
        new Thread(this).start();
    } 
    public void run() {	
        for (int i = 0; i < s1.length; i++) {	
            m.Question("Person1: " + s1[i]);		
        }  
    }	
}




package threadPkg;

public class T2 implements Runnable {
    Chat m;
    String[] s2 = { "Hi", "I am good, what about you?", "Great!" };
    public T2(Chat m2) {
        this.m = m2;		
        new Thread(this).start();
    } public void run() {		
        for (int i = 0; i < s2.length; i++) {
            m.Answer("Person2: "  + s2[i]);	
        }  
    }  
}




package threadPkg;

public class TestThread {
    public static void main(String[] args) {
        Chat m = new Chat();
        new T1(m);	new T2(m);	
    }
}







class MyThread extends Thread  { 
	public void run() 	{ 
		for (int i=0; i<5 ; i++) 
		     System.out.println(Thread.currentThread().getName() 	+ " in control"); 
	} 		} 
public class ThreadPrg1  { 
	public static void main(String[]args) 	{ 
		MyThread t = new MyThread(); 
		t.start(); 
		for (int i=0; i<5; i++) 		{ 
                   System.out.println(Thread.currentThread().getName() 	+ " in control");
			// Control passes to child thread 
			Thread.yield(); 
			// After execution of child Thread main thread takes over 
			//System.out.println(Thread.currentThread().getName() 	+ " in control"); 
		} 	} 
} 






public class ThreadPrg1 extends Thread {
	String s;
	ThreadPrg1(String ss){s=ss;}
	public void run() {
		System.out.println(s + ": Start.. ");
		try {
			Thread.sleep(300);
		} catch (InterruptedException ie) {
		}
		System.out.println(s+ " : End.. ");
	}
	public static void main(String[] args) {
		ThreadPrg1 c1 = new ThreadPrg1("c1");
		ThreadPrg1 c2 = new ThreadPrg1("c2");
		System.out.println("Main Start.. ");
		c1.start();
		try {
			c1.join(); // Waiting for c1 to finish
		} catch (InterruptedException ie) {	}
		System.out.println("c1.join ended!");
		c2.start();
		System.out.println("Main Ends.. ");
	}
}










Thread Priority does not mean execution priority, it represents priority in case of starvation of resource.




